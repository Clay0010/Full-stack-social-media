// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement())
  email String  @unique
  password  String
  username  String  @unique
  bio String?
  createdAt DateTime  @default(now())
  profilePicUrl String?
  likes Like[]
  comment Comment[]
  posts Post[]
  followers UserRelation[]  @relation("followers")
  following UserRelation[]  @relation("following") 
}

model Post {
  id  Int @id @default(autoincrement())
  content String
  createdAt DateTime  @default(now())
  imageUrl  String?
  userId  Int
  user  User  @relation(fields: [userId], references: [id])
  comments  Comment[]
  likes Like[]
  
}

model Comment {
  id  Int @id @default(autoincrement())
  content String
  createdAt DateTime  @default(now())
  userId  Int
  user  User  @relation(fields: [userId], references: [id])
  postId  Int
  post  Post  @relation(fields: [postId], references: [id])

}

model Like {
  id Int @id @default(autoincrement())
  userId  Int
  user  User  @relation(fields: [userId], references: [id])
  postId  Int
  post  Post  @relation(fields: [postId], references: [id])

  @@unique([userId, postId]) // ensures a user can like a post only once (prevents duplicates)
}

model UserRelation {
  followerId  Int
  followingId  Int

  follower  User  @relation("followers", fields: [followerId], references: [id])
  following User  @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId]) // prevents duplicates (a user can only follow another user once)
}


